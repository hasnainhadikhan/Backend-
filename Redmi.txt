Request and Response 
. Request mein data hota hai sarara anaa wala user ki Request ki taraf sa . Like user ki location 
  and uski device ki information or bohut si chizzain . Request is a data gu server ki taraf sa aiaga
. Response mein control huta hai jiski base per hum server per response bheg pata hain. Contorl means
  have functionality and other accses 
   
Middleware 
Next()
next is just a push so that our request move to the next thing which should be executed   

Data Storage 
Asi jaga gaha humara user ki sari information and data store kar sakta hain database 

Type of DataBase - SQL / NoSQL
SQL ka data ik Table foam ma huta hai
NoSQL ka data Object foam ma huta hai jesa samagh na easy huta hai we use NoSQL 
NoSQL is a concept that impletation is monogoDB  
 {
    name : 'hasnain',
    age  : '19'
  } 
MonogoDB is the database which store the data in NoSQL foam 
DataBase -> Collection -> Document

      Code        ----     DataBase 
--------------------------------------------------
monogoose.connect        database create
Model create             collection create
Create  code             Document create   
 const express = require('express')
const app = express()
const User = require('./model/user.model.js');
const port = 3000

app.get('/', (req, res) => {
  res.send('Hello World!')
})
app.get('/create', async (req, res) => {
    const createduser = await User({
      name: 'John Doe',
      email: 'hasnainhadikhan@gmail.com',
      password : "2345677",
      username : 'hadaikhan',
      age: 25  
    });
    res.send(createduser);
})
app.get('/update', async (req, res) => {   
  const updateduser = await User.findOneAndUpdate( 
    { name: 'John harry Doe' },
    { username: ' hadikhan'},
    { new: true }
   );
   
      res.send(updateduser);
})
app.get('/read', async (req, res ,next) => {
  const readuser = await User.find();
  res.send(readuser);
  next();
})
app.get('/delete', async (req, res) => {
    const deleteduser = await User.findOneAndDelete({ name: 'John Doe' });
    res.send(deleteduser);
})
// app.get('/portfolio', (req, res) => {
//   res.send('Hello This is my portfolio Page!')
// })

app.listen(port, () => {
  console.log(`Example app listening on port ${port}`)
})
// //  CREATE
// app.get("/create", async (req, res) => {
//   try {
//     const createdUser = new User({
//       name: "John Doe",
//       email: "hasnainhadikhan@gmail.com",
//       password: "2345677",
//       username: "hadaikhan",
//       age: 25,
//     });
//     await createdUser.save(); // IMPORTANT!
//     res.send(createdUser);
//   } catch (error) {
//     res.status(500).send("Error creating user: " + error.message);
//   }
// });



//  READ
// app.get("/read", async (req, res) => {
//   try {
//     const readUsers = await User.find();
//     res.send(readUsers);
//   } catch (error) {
//     res.status(500).send("Error reading users: " + error.message);
//   }
// });

//  UPDATE
// app.get("/update", async (req, res) => {
//   try {
//     const updatedUser = await User.findOneAndUpdate(
//       { name: "John Doe" }, // this must match existing data
//       { username: "hadikhan_updated" },
//       { new: true }
//     );
//     res.send(updatedUser || "User not found");
//   } catch (error) {
//     res.status(500).send("Error updating user: " + error.message);
//   }
// });
// // Delete
// app.get("/delete", async (req, res) => {
//   try {
//     const deletedUser = await User.findOneAndDelete({ name: "John Doe" });

//     if (!deletedUser) {
//       return res.status(404).send({ message: "User not found" });
//     }

//     res.send({
//       message: "User deleted successfully",
//       user: deletedUser
//     });
//   } catch (error) {
//     res.status(500).send({ error: "Something went wrong", details: error.message });
//   }
// });
